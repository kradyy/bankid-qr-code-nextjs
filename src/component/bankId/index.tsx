import useBankId from "@/hooks/useBankId";
import Button from "@/components/elements/Button";
import React, { useContext, useEffect, useMemo, useReducer } from "react";
import { BankIdContext } from "./BankIdContext";
import AuthenticationView from "./methods/AuthenticationView";

const identificationDebug = {
  orderRef: "9218c98e-15d6-4668-ad25-5927a08f2590",
  status: "complete",
  completionData: {
    user: {
      personalNumber: "198912072454",
      name: "Chris Johansson",
      givenName: "Chris",
      surname: "Johansson",
    },
    device: {
      ipAddress: "80.252.216.254",
      uhi: "SUqES1XExGZ/kNk+N9DfVL/VhKw=",
    },
    bankIdIssueDate: "2024-08-06Z",
    signature:
      "",
    ocspResponse:
      "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",
  },
  secret: "2f8f8a922095da2a1339823ea2989872256635f8",
};

interface BankIdWrapperProps {
  successComponent?: React.ComponentType<{
    identification: any;
    bankId: any;
  }> | null;
  onAuthenticated?: any;
  bankIdTitle?: string;
  bankIdDescription?: string;
  bankIdOptions?: BankIdOptions;
  debug?: boolean;
}

interface BankIdOptions {
  userVisibleData?: string;
  bankIdMethod?: "sign" | "auth";
  setBankIDSecret?: boolean;
}

export default function BankIdWrapper({
  onAuthenticated,
  bankIdDescription,
  bankIdTitle,
  successComponent: SuccessComponent = null,
  bankIdOptions = {},
  debug = false,
}: BankIdWrapperProps) {
  const bankId = useBankId(bankIdOptions);

  const {
    qrCodeImage,
    identification,
    hasError,
    hasTimedOut,
    startToken,
    autoStartToken,
    retriggerAuth,
    reset,
  } = bankId;

  const identificationStatus = useMemo(
    () => (debug ? "completed" : identification?.status),
    [identification?.status, debug]
  );

  const bankIdReducer = (state: any, action: any) => {
    switch (action.type) {
      case "SET_BANKID_DATA":
        return { ...state, ...action.payload };
      case "SET_AUTHENTICATION_METHOD":
        return { ...state, authenticationMethod: action.payload };
      default:
        return state;
    }
  };

  const initialState = {
    qrCodeImage,
    identification,
    autoStartToken,
    hasTimedOut,
    startToken,
    hasError,
    retriggerAuth,
    reset,
    authenticationMethod: "",
  };

  const identificationData = debug ? identificationDebug : identification;

  const [state, dispatch] = useReducer(bankIdReducer, initialState);
  const authenticationMethod = state?.authenticationMethod;

  console.log("authenticationMethod", authenticationMethod);

  useEffect(() => {
    dispatch({
      type: "SET_BANKID_DATA",
      payload: {
        qrCodeImage,
        identification,
        hasTimedOut,
        autoStartToken,
        startToken,
        hasError,
        authenticationMethod,
        retriggerAuth,
        reset,
      },
    });
  }, [
    qrCodeImage,
    identification,
    hasTimedOut,
    startToken,
    hasError,
    autoStartToken,
  ]);

  const openAutoStart = () => {
    dispatch({ type: "SET_AUTHENTICATION_METHOD", payload: "auto" });
    retriggerAuth();
  };

  const openQRCode = () => {
    dispatch({ type: "SET_AUTHENTICATION_METHOD", payload: "qr" });
    retriggerAuth();
  };

  useEffect(() => {
    if (identificationStatus !== "complete" || !onAuthenticated) return;

    onAuthenticated({
      identification,
      bankId,
    });
  }, [identificationStatus]);

  return (
    <BankIdContext.Provider value={{ state, dispatch }}>
      <div className="w-full">
        {identificationData?.status === "complete" && SuccessComponent && (
          <SuccessComponent
            identification={identificationData}
            bankId={bankId}
          />
        )}

        {identificationData?.status !== "complete" &&
        ["auto", "qr"].includes(authenticationMethod) ? (
          <AuthenticationView />
        ) : null}

        {identificationData?.status !== "complete" &&
        authenticationMethod === "" ? (
          <div className="flex flex-col space-y-8">
            <Button
              onClick={openQRCode}
              className="p-4 bg-blue font-semibild text-white justify-center text-md"
              borderColor="transparent"
              icon="bankid"
              iconDirection="left"
            >
              Mobilt BankID på annan enhet
            </Button>
            <Button
              className="p-4 bg-transparent font-semibild text-blue justify-center text-md"
              borderColor="blue"
              onClick={openAutoStart}
              icon="bankid"
              iconDirection="left"
            >
              BankID på denna enheten
            </Button>
          </div>
        ) : null}

        <div className="flex flex-col space-y-4 my-8">
          {bankIdTitle && <strong>{bankIdTitle}</strong>}
          {bankIdDescription && <p>{bankIdDescription}</p>}
        </div>
      </div>
    </BankIdContext.Provider>
  );
}
